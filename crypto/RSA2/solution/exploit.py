from Crypto.Util.number import long_to_bytes

e = 2
N = 5004569440512110095315912424236175274218550002178520628553704610188181488300107757918726993816925107576358839207238392032724279712357944600981150418044342904955183246544920154528020203647228706080590639340343735982316211703073337574981350845754016638561933765280884678570680367503568140933515083469472139275415872875491138960647889141175026872713919095134528223443650952975885468899247330481542073142242487522406896050936375863486400486804933954660288571791351740728080243533354249689085912022147064731371745696132875825246594817148582726296487493779171982197115211832071128542525685567572109806874753150627688296718782579760309570820648240192966871855147357680212713231986714423893717406698898987306268449007903381646144106494586566066635414476454341566286646898749536138451297644386089944695562753778211546095612829981319898508937274774759125681653612693566131588017270700916204903608877962939755738345796258686161864194209

enc = 178578054113587665880573638525543971357824122622159505488720384368602953181166564534730680603152376825130794419393716164247143515361066971379409790862584250121

""" because of N is very large , the modulus will be inutile , so it's enough to calculate the square root using Newton's method to get the flag """
def int_sqrt(n):
    x = n
    y = (x + 1) // 2
    while y < x:
        x = y
        y = (x + n // x) // 2
    return x
    
flag = long_to_bytes(int_sqrt(enc)).decode()
print(flag)
